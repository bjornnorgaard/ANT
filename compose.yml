services:

  todos-api:
    image: ursu/ant-todos-api:latest
    build:
      context: src
      dockerfile: ../dockerfiles/todos.Dockerfile
    ports:
      - "6001:8080"
    env_file:
      - .env
    depends_on:
      - mssqlserver
    restart: on-failure

  mssqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      MSSQL_SA_PASSWORD: "yourStrong(!)Password"
      ACCEPT_EULA: "Y"
    volumes:
      - ./volumes/mssqlserver/mssql/data:/var/opt/mssql/data
      - ./volumes/mssqlserver/sqlserver:/var/opt/mssqlserver

  # apm-server:
  #   image: docker.elastic.co/apm/apm-server:7.16.0
  #   depends_on:
  #     - elasticsearch
  #     - kibana
  #   cap_add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
  #   cap_drop: [ "ALL" ]
  #   ports:
  #     - "8200:8200"
  #   command: >
  #     apm-server -e
  #       -E apm-server.rum.enabled=true
  #       -E setup.kibana.host=kibana:5601
  #       -E setup.template.settings.index.number_of_replicas=0
  #       -E apm-server.kibana.enabled=true
  #       -E apm-server.kibana.host=kibana:5601
  #       -E output.elasticsearch.hosts=["elasticsearch:9200"]

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
  #   ports:
  #     - "9200:9200"
  #   environment:
  #     - bootstrap.memory_lock=true
  #     - cluster.name=docker-cluster
  #     - cluster.routing.allocation.disk.threshold_enabled=false
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
  #   ulimits:
  #     memlock:
  #       hard: -1
  #       soft: -1
  #   volumes:
  #     - ./volumes/elasticsearch/data:/usr/share/elasticsearch/data

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.15.2
  #   depends_on:
  #     - elasticsearch
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #     ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"

  # jaeger:
  #   image: ${JAEGERTRACING_IMAGE}
  #   command:
  #     - "--memory.max-traces=5000"
  #     - "--query.base-path=/ui"
  #     - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
  #     - "--prometheus.query.normalize-calls=true"
  #     - "--prometheus.query.normalize-duration=true"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 400M
  #   restart: unless-stopped
  #   ports:
  #     - "${JAEGER_SERVICE_PORT}:${JAEGER_SERVICE_PORT}"
  #     - "${OTEL_COLLECTOR_PORT_GRPC}"
  #   environment:
  #     - METRICS_STORAGE_TYPE=prometheus

  # grafana:
  #   image: ${GRAFANA_IMAGE}
  #   ports:
  #     - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 100M
  #   restart: on-failure
  #   environment:
  #     - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
  #   volumes:
  #     - ./volumes/grafana/:/var/lib/grafana
  #     - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini
  #     - ./configs/grafana/provisioning/:/etc/grafana/provisioning/

  # otelcol:
  #   image: ${COLLECTOR_CONTRIB_IMAGE}
  #   ports:
  #     - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
  #     - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
  #     - "55679:55679"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 200M
  #   restart: unless-stopped
  #   command:
  #     [
  #       "--config=/etc/otelcol-config.yml",
  #       "--config=/etc/otelcol-config-extras.yml"
  #     ]
  #   volumes:
  #     - ./configs/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
  #     - ./configs/otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
  #   depends_on:
  #     - jaeger

  # prometheus:
  #   image: ${PROMETHEUS_IMAGE}
  #   ports:
  #     - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
  #   command:
  #     - --web.console.templates=/etc/prometheus/consoles
  #     - --web.console.libraries=/etc/prometheus/console_libraries
  #     - --storage.tsdb.retention.time=1h
  #     - --config.file=/etc/prometheus/prometheus-config.yaml
  #     - --storage.tsdb.path=/prometheus
  #     - --web.enable-lifecycle
  #     - --web.route-prefix=/
  #     - --enable-feature=exemplar-storage
  #     - --enable-feature=otlp-write-receiver
  #   volumes:
  #     - ./configs/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 300M
  #   restart: unless-stopped

  # opensearch:
  #   image: ${OPENSEARCH_IMAGE}
  #   ports:
  #     - "9200"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #   restart: unless-stopped
  #   environment:
  #     - cluster.name=demo-cluster
  #     - node.name=demo-node
  #     - bootstrap.memory_lock=true
  #     - discovery.type=single-node
  #     - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
  #     - DISABLE_INSTALL_DEMO_CONFIG=true
  #     - DISABLE_SECURITY_PLUGIN=true
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536

  aspire-dashboard:
    image: mcr.microsoft.com/dotnet/nightly/aspire-dashboard:8.0.0-preview.6
    ports:
      - "18888:18888"
      - "4317:18889"
    restart: on-failure
